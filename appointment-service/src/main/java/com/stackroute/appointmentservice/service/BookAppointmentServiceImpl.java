package com.stackroute.appointmentservice.service;


import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.stackroute.appointmentservice.dto.BookAppointmentDto;
import com.stackroute.appointmentservice.dto.EmployeeAppointmentDto;
import com.stackroute.appointmentservice.entity.BookAppointment;
import com.stackroute.appointmentservice.exception.InvalideDateException;
import com.stackroute.appointmentservice.exception.ResourceNotFoundException;
import com.stackroute.appointmentservice.interfaces.BookAppointmentService;
import com.stackroute.appointmentservice.interfaces.EmployeeAppointmentService;
import com.stackroute.appointmentservice.repository.BookAppointmentRepository;


@Service
public class BookAppointmentServiceImpl implements BookAppointmentService{

	@Autowired
	private SequenceGeneratorService sequenceGeneratorService;

	
	@Autowired
	private BookAppointmentRepository bookRepository;
	
	@Autowired
	private EmployeeAppointmentService employeeService;   //To get allowed appointment by calling method internally before customer booking appointment

	/*
	 * @Description : This method is used to create a new booking appointment and stores the data into database
	 * @Params : This method contains one parameter of type BookAppointmentDto
	 * @Author : jyoti
	 */
	@Override
	public BookAppointmentDto addBookingAppointment(BookAppointmentDto bookAppointmentDto) {
		
				
		if(bookAppointmentDto.getBookSlotDate().isBefore(LocalDate.now()))
		{
			throw new InvalideDateException("please enter valid date");
		}
		
		List<BookAppointment> bookAppointmentslist= bookRepository.findByEmployeeEmailIdAndBookSlotDate(bookAppointmentDto.getEmployeeEmailId(), bookAppointmentDto.getBookSlotDate());
		
		for (BookAppointment bookAppointment : bookAppointmentslist)
		{
			if(bookAppointmentDto.getBookSlotStartTime().isAfter(bookAppointment.getBookSlotStartTime())||bookAppointment.getBookSlotEndTime().isBefore(bookAppointment.getBookSlotEndTime()))
			{
			throw new InvalideDateException("Employee is already booked...");		
		    }
		
		}
		
		BookAppointment bookAppointment = convertToEntity(bookAppointmentDto);
		
		   //generate sequence
		
		bookAppointment.setAppointmentId(sequenceGeneratorService.generateSequence(BookAppointment.SEQUENCE_NAME));    //Setting appointment_Id as autogenerated values
		
		BookAppointmentDto bookAppointmentDto2 = convertToDto(bookRepository.save(bookAppointment));
		
		

		EmployeeAppointmentDto employeeAppointmentDto = new EmployeeAppointmentDto();
		employeeAppointmentDto.setAppointmentId(bookAppointment.getAppointmentId());
		employeeAppointmentDto.setEmployeeEmailId(bookAppointment.getEmployeeEmailId());
		employeeAppointmentDto.setAppointmentStartTime(bookAppointment.getBookSlotStartTime());
		employeeAppointmentDto.setAppointmentEndTime(bookAppointment.getBookSlotEndTime());
		employeeAppointmentDto.setAppointmentDate(bookAppointment.getBookSlotDate());
		employeeAppointmentDto.setServiceId(bookAppointment.getServiceId());
		employeeAppointmentDto.setIsAvailable(true);
		employeeService.addAppointmentDto(employeeAppointmentDto);
		return bookAppointmentDto2 ;
	
	}

	/*
	 * @Description : This method is used to get the particular booked appointment details from database by appointmentId
	 * @Params : This method contains one parameter of type long appointment
	 * @Author : jyoti
	 */
	@Override
	public BookAppointmentDto getBookingDetailsByAppointmentID(long appointmentId) {
	
		if(bookRepository.findById(appointmentId).isEmpty())
			throw new ResourceNotFoundException("No Id is present :"+appointmentId);
			else {
				return convertToDto(bookRepository.findById(appointmentId).get());
			}
		
	}

	/*
	 * @Description : This method is used to get the particular booked appointment details from database by customer Email_ID
	 * @Params : This method contains one parameter of type string customer Email_Id
	 * @Author : jyoti
	 */
	@Override
	public List<BookAppointmentDto> getBookingDetailsByCustomerEmailId(String customerEmailId) {
		
		if(bookRepository.findByCustomerEmailId(customerEmailId).isEmpty())
			throw new ResourceNotFoundException("No Id is present :"+customerEmailId);
			List<BookAppointment> list= bookRepository.findByCustomerEmailId(customerEmailId);
			List<BookAppointmentDto> listDto = new ArrayList<>();
			
			for (BookAppointment bookAppointment : list) {
				BookAppointmentDto bookAppointmentDto = convertToDto(bookAppointment);
				listDto.add(bookAppointmentDto);
			}
			return listDto;
	}
	/*
	 * @Description : This method is used to get the particular booked appointment details from database by customer Email_ID and bookingDate
	 * @Params : This method contains one parameter of type string customer Email_Id and bookingDate
	 * @Author : jyoti
	 */
	@Override
	public List<BookAppointmentDto> getBookingDetailsByCustomerEmailIdAndBookingDate(String customerEmailId,
			LocalDate appointmentDate) {
	          if(bookRepository.findByCustomerEmailIdAndBookSlotDate(customerEmailId,appointmentDate).isEmpty())
	        	  throw  new ResourceNotFoundException("No Booking details for this date :"+appointmentDate);
	          List<BookAppointment> list= bookRepository.findByCustomerEmailIdAndBookSlotDate(customerEmailId,appointmentDate);
				List<BookAppointmentDto> listDto = new ArrayList<>();
				
				for (BookAppointment bookAppointment : list) {
					BookAppointmentDto bookAppointmentDto = convertToDto(bookAppointment);
					listDto.add(bookAppointmentDto);
				}
				return listDto;
	}

	/*
	 * @Description : This method is used to updates booked appointment details by using appointmentId
	 * @Params : It contains two parameters of type long appointmentId and another is BookAppointmentDto
	 * @Author : jyoti
	 */
	@Override
	public BookAppointmentDto updateBookingDetail(long appointmentId, BookAppointmentDto bookAppointmentDto) {
		 
		Optional<BookAppointment> findById = bookRepository.findById(appointmentId);
		if(findById.isEmpty())
			throw new ResourceNotFoundException("No Id is present :"+appointmentId);
          
		BookAppointment bookAppointment = new BookAppointment();
		bookAppointment.setAppointmentId(findById.get().getAppointmentId());
		bookAppointment.setBookSlotDate(bookAppointmentDto.getBookSlotDate());
		bookAppointment.setBookSlotEndTime(bookAppointmentDto.getBookSlotEndTime());
		bookAppointment.setBookSlotStartTime(bookAppointmentDto.getBookSlotStartTime());
		bookAppointment.setBookSlotEndTime(bookAppointmentDto.getBookSlotEndTime());
		bookAppointment.setComment(bookAppointmentDto.getComment());
		bookAppointment.setCustomerEmailId(bookAppointmentDto.getComment());
		bookAppointment.setServiceId(bookAppointmentDto.getServiceId());
		
		bookAppointmentDto.setAppointmentId(findById.get().getAppointmentId());
		
		EmployeeAppointmentDto employeeAppointmentDto = new EmployeeAppointmentDto();
		employeeAppointmentDto.setAppointmentId(bookAppointmentDto.getAppointmentId());
		employeeAppointmentDto.setEmployeeEmailId(bookAppointmentDto.getEmployeeEmailId());
		employeeAppointmentDto.setAppointmentStartTime(bookAppointmentDto.getBookSlotStartTime());
		employeeAppointmentDto.setAppointmentEndTime(bookAppointmentDto.getBookSlotEndTime());
		employeeAppointmentDto.setAppointmentDate(bookAppointmentDto.getBookSlotDate());
		
		employeeService.updateAppointmentDetails(appointmentId, employeeAppointmentDto);
		
		bookRepository.save(bookAppointment);
		return bookAppointmentDto;
	}

	/*
	 * @Description : This method is used to cancel booked appointment  by using appointmentId
	 * @Params : It contains one parameter of type long appointmentId
	 * @Author : jyoti
	 */
	@Override
	public BookAppointmentDto cancelBookingDetails(long appointmentId) 
	{
		if(bookRepository.findById(appointmentId).isEmpty()) {
			throw new ResourceNotFoundException("No Id is present :"+appointmentId);
		}else {
			BookAppointment bookingAppointment = bookRepository.findById(appointmentId).get();
		   bookingAppointment.setIsCancelled(true);
		   employeeService.cancelAppointmentDetails(appointmentId);
		   bookRepository.save(bookingAppointment);
		   return convertToDto(bookingAppointment);
	}
	}
	/*
	 * @Description : This method is used to convert BookAppointmentDto to bookAppointment by using ModelMapper class
	 * @Params : This method contains one parameter of type BookAppointmentDto
	 * @Author : jyoti
	 */
	public BookAppointment convertToEntity(BookAppointmentDto bookAppointmentDto)
	{
		BookAppointment bookAppointment = new BookAppointment();
		bookAppointment = new ModelMapper().map(bookAppointmentDto, BookAppointment.class);
		return bookAppointment;
	}
	/*
	 * @Description : This method is used to convert BookAppointment to bookAppointmentDto by using ModelMapper class
	 * @Params : This method contains one parameter of type BookAppointment
	 * @Author : jyoti
	 */
	public BookAppointmentDto convertToDto(BookAppointment bookAppointment)
	{
		BookAppointmentDto bookAppointmentDto = new BookAppointmentDto();
		bookAppointmentDto = new ModelMapper().map(bookAppointment, BookAppointmentDto.class);
		return bookAppointmentDto;
	} 

	
}
